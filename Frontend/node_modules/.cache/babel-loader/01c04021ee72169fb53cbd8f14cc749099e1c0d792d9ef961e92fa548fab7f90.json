{"ast":null,"code":"var _jsxFileName = \"/home/taku_prosper/Music/IS/Frontend/elsf/src/components/EventDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventDetail() {\n  _s();\n  // Extract the 'id' from the URL using useParams hook\n  const {\n    id\n  } = useParams();\n  // State for holding event data and loading/error states\n  const [event, setEvent] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Function to fetch event details based on the ID\n    const fetchEventDetails = async () => {\n      try {\n        // Make an API request to fetch the event details\n        const response = await axios.get(`/api/events/${id}`);\n        setEvent(response.data); // Store the fetched event data in state\n      } catch (err) {\n        // Handle error and display a message if event not found or API fails\n        console.error('Error fetching event details', err);\n        setError('Event not found');\n      } finally {\n        setLoading(false); // Set loading to false after the API call\n      }\n    };\n\n    // Call the function to fetch event details\n    fetchEventDetails();\n  }, [id]); // Run effect when 'id' changes\n\n  // Display loading state while fetching event data\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading event details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Display error message if event is not found\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render event details once the data is successfully fetched\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: event.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: event.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Date: \", new Date(event.date).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Location: \", event.location]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(EventDetail, \"EOK41kRtPcDLbAD7r1ckkDZC2GA=\", false, function () {\n  return [useParams];\n});\n_c = EventDetail;\nexport default EventDetail;\nvar _c;\n$RefreshReg$(_c, \"EventDetail\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","EventDetail","_s","id","event","setEvent","loading","setLoading","error","setError","fetchEventDetails","response","get","data","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","name","description","Date","date","toLocaleDateString","location","_c","$RefreshReg$"],"sources":["/home/taku_prosper/Music/IS/Frontend/elsf/src/components/EventDetail.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nfunction EventDetail() {\n  // Extract the 'id' from the URL using useParams hook\n  const { id } = useParams();\n  // State for holding event data and loading/error states\n  const [event, setEvent] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Function to fetch event details based on the ID\n    const fetchEventDetails = async () => {\n      try {\n        // Make an API request to fetch the event details\n        const response = await axios.get(`/api/events/${id}`);\n        setEvent(response.data);  // Store the fetched event data in state\n      } catch (err) {\n        // Handle error and display a message if event not found or API fails\n        console.error('Error fetching event details', err);\n        setError('Event not found');\n      } finally {\n        setLoading(false);  // Set loading to false after the API call\n      }\n    };\n\n    // Call the function to fetch event details\n    fetchEventDetails();\n  }, [id]);  // Run effect when 'id' changes\n\n  // Display loading state while fetching event data\n  if (loading) {\n    return <div>Loading event details...</div>;\n  }\n\n  // Display error message if event is not found\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  // Render event details once the data is successfully fetched\n  return (\n    <div>\n      <h1>{event.name}</h1>\n      <p>{event.description}</p>\n      <p>Date: {new Date(event.date).toLocaleDateString()}</p>\n      <p>Location: {event.location}</p>\n      {/* Add more event details here as needed */}\n    </div>\n  );\n}\n\nexport default EventDetail;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC1B;EACA,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,eAAeT,EAAE,EAAE,CAAC;QACrDE,QAAQ,CAACM,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAE;MAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ;QACAC,OAAO,CAACP,KAAK,CAAC,8BAA8B,EAAEM,GAAG,CAAC;QAClDL,QAAQ,CAAC,iBAAiB,CAAC;MAC7B,CAAC,SAAS;QACRF,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;MACtB;IACF,CAAC;;IAED;IACAG,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC,CAAC,CAAE;;EAEX;EACA,IAAIG,OAAO,EAAE;IACX,oBAAON,OAAA;MAAAgB,QAAA,EAAK;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC5C;;EAEA;EACA,IAAIZ,KAAK,EAAE;IACT,oBAAOR,OAAA;MAAAgB,QAAA,EAAMR;IAAK;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC3B;;EAEA;EACA,oBACEpB,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAKZ,KAAK,CAACiB;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrBpB,OAAA;MAAAgB,QAAA,EAAIZ,KAAK,CAACkB;IAAW;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BpB,OAAA;MAAAgB,QAAA,GAAG,QAAM,EAAC,IAAIO,IAAI,CAACnB,KAAK,CAACoB,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxDpB,OAAA;MAAAgB,QAAA,GAAG,YAAU,EAACZ,KAAK,CAACsB,QAAQ;IAAA;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE9B,CAAC;AAEV;AAAClB,EAAA,CAhDQD,WAAW;EAAA,QAEHH,SAAS;AAAA;AAAA6B,EAAA,GAFjB1B,WAAW;AAkDpB,eAAeA,WAAW;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}